package com.nzl.dao;

import com.nzl.common.constant.TableConstant;
import com.nzl.dao.provider.ArticleBlogSqlProvider;
import com.nzl.pojo.ArticleBlog;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface ArticleBlogMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @Delete({
        "delete from article_blog",
        "where article_blog_id = #{articleBlogId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long articleBlogId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @Insert({
        "insert into article_blog (article_blog_id, title, ",
        "blog_time, uid, ",
        "blog_type_id, blog_status, ",
        "gmt_modified, gmt_create, ",
        "content, digest)",
        "values (#{articleBlogId,jdbcType=BIGINT}, #{title,jdbcType=CHAR}, ",
        "#{blogTime,jdbcType=TIMESTAMP}, #{uid,jdbcType=VARCHAR}, ",
        "#{blogTypeId,jdbcType=VARCHAR}, #{blogStatus,jdbcType=CHAR}, ",
        "#{gmtModified,jdbcType=TIMESTAMP}, #{gmtCreate,jdbcType=TIMESTAMP}, ",
        "#{content,jdbcType=LONGVARCHAR}, #{digest,jdbcType=VARCHAR})"
    })
    int insert(ArticleBlog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @InsertProvider(type= ArticleBlogSqlProvider.class, method="insertSelective")
    int insertSelective(ArticleBlog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "article_blog_id, title, blog_time, uid, blog_type_id, blog_status, gmt_modified, ",
        "gmt_create, content, digest",
        "from article_blog",
        "where article_blog_id = #{articleBlogId,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="article_blog_id", property="articleBlogId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="title", property="title", jdbcType=JdbcType.CHAR),
        @Result(column="blog_time", property="blogTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="uid", property="uid", jdbcType=JdbcType.VARCHAR),
        @Result(column="blog_type_id", property="blogTypeId", jdbcType=JdbcType.VARCHAR),
        @Result(column="blog_status", property="blogStatus", jdbcType=JdbcType.CHAR),
        @Result(column="gmt_modified", property="gmtModified", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gmt_create", property="gmtCreate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="digest", property="digest", jdbcType=JdbcType.VARCHAR)
    })
    ArticleBlog selectByPrimaryKey(Long articleBlogId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @UpdateProvider(type=ArticleBlogSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(ArticleBlog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @Update({
        "update article_blog",
        "set title = #{title,jdbcType=CHAR},",
          "blog_time = #{blogTime,jdbcType=TIMESTAMP},",
          "uid = #{uid,jdbcType=VARCHAR},",
          "blog_type_id = #{blogTypeId,jdbcType=VARCHAR},",
          "blog_status = #{blogStatus,jdbcType=CHAR},",
          "gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},",
          "gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},",
          "content = #{content,jdbcType=LONGVARCHAR}",
          "digest = #{digest,jdbcType=VARCHAR}",
        "where article_blog_id = #{articleBlogId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKeyWithBLOBs(ArticleBlog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article_blog
     *
     * @mbg.generated
     */
    @Update({
        "update article_blog",
        "set title = #{title,jdbcType=CHAR},",
          "blog_time = #{blogTime,jdbcType=TIMESTAMP},",
          "uid = #{uid,jdbcType=VARCHAR},",
          "digest = #{digest,jdbcType=VARCHAR},",
          "blog_type_id = #{blogTypeId,jdbcType=VARCHAR},",
          "blog_status = #{blogStatus,jdbcType=CHAR},",
          "gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},",
          "gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}",
        "where article_blog_id = #{articleBlogId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(ArticleBlog record);

    @Select("select * from " + TableConstant.ARTICLE_BLOG_TABLE)
    @Results({
            @Result(column = "article_blog_id", property = "articleBlogId", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "title", property = "title", jdbcType = JdbcType.VARCHAR),
            @Result(column = "blog_time", property = "blogTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "uid", property = "uid", jdbcType = JdbcType.VARCHAR),
            @Result(column = "blog_type_id", property = "blogTypeId", jdbcType = JdbcType.TINYINT),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_create", property = "gmtCreate", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "content", property = "content", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "digest", property = "digest", jdbcType = JdbcType.VARCHAR)
    })
    List<ArticleBlog> getAllArticle();

    @Select("select * from " + TableConstant.ARTICLE_BLOG_TABLE + " where uid=#{uid} order by blog_time desc")
    @Results({
            @Result(column = "article_blog_id", property = "articleBlogId", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "title", property = "title", jdbcType = JdbcType.VARCHAR),
            @Result(column = "blog_time", property = "blogTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "uid", property = "uid", jdbcType = JdbcType.VARCHAR),
            @Result(column = "blog_type_id", property = "blogTypeId", jdbcType = JdbcType.TINYINT),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_create", property = "gmtCreate", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "content", property = "content", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "digest", property = "digest", jdbcType = JdbcType.VARCHAR)
    })
    List<ArticleBlog> getAllArticleByUid(String uid);
}