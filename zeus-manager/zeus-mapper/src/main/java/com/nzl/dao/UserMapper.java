package com.nzl.dao;

import com.nzl.dao.provider.UserSqlProvider;
import com.nzl.pojo.User;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import static com.nzl.common.constant.TableConstant.USER_TABLE;

public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Delete({
        "delete from user",
        "where ukey = #{ukey,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(String uid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Insert({
        "insert into user (uid, ",
        "username, password, real_name, ",
        "gender, birthday, head_portrait_url, ",
        "introduction, join_time, ",
        "email, phone, salt, ",
        "status, gmt_create, ",
        "gmt_modified)",
        "values (#{uid,jdbcType=VARCHAR}, ",
        "#{username,jdbcType=CHAR}, #{password,jdbcType=CHAR}, #{realName,jdbcType=CHAR}, ",
        "#{gender,jdbcType=CHAR}, #{birthday,jdbcType=DATE}, #{headPortraitUrl,jdbcType=VARCHAR}, ",
        "#{introduction,jdbcType=VARCHAR}, #{joinTime,jdbcType=DATE}, ",
        "#{email,jdbcType=VARCHAR}, #{phone,jdbcType=CHAR}, #{salt,jdbcType=VARCHAR}, ",
        "#{status,jdbcType=CHAR}, #{gmtCreate,jdbcType=TIMESTAMP}, ",
        "#{gmtModified,jdbcType=TIMESTAMP})"
    })
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @InsertProvider(type= UserSqlProvider.class, method="insertSelective")
    int insertSelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "uid, username, password, real_name, gender, birthday, head_portrait_url, ",
        "introduction, join_time, email, phone, salt, status, gmt_create, gmt_modified",
        "from user",
        "where uid = #{uid,jdbcType=CHAR}"
    })
    @Results({
        @Result(column="ukey", property="ukey", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="uid", property="uid", jdbcType=JdbcType.VARCHAR),
        @Result(column="username", property="username", jdbcType=JdbcType.CHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.CHAR),
        @Result(column="real_name", property="realName", jdbcType=JdbcType.CHAR),
        @Result(column="gender", property="gender", jdbcType=JdbcType.CHAR),
        @Result(column="birthday", property="birthday", jdbcType=JdbcType.DATE),
        @Result(column="head_portrait_url", property="headPortraitUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="introduction", property="introduction", jdbcType=JdbcType.VARCHAR),
        @Result(column="join_time", property="joinTime", jdbcType=JdbcType.DATE),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone", property="phone", jdbcType=JdbcType.CHAR),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.CHAR),
        @Result(column="gmt_create", property="gmtCreate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gmt_modified", property="gmtModified", jdbcType=JdbcType.TIMESTAMP)
    })
    User selectByPrimaryKey(String uid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @UpdateProvider(type=UserSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Update({
        "update user",
        "set username = #{username,jdbcType=CHAR},",
          "password = #{password,jdbcType=CHAR},",
          "real_name = #{realName,jdbcType=CHAR},",
          "gender = #{gender,jdbcType=CHAR},",
          "birthday = #{birthday,jdbcType=DATE},",
          "head_portrait_url = #{headPortraitUrl,jdbcType=VARCHAR},",
          "introduction = #{introduction,jdbcType=VARCHAR},",
          "join_time = #{joinTime,jdbcType=DATE},",
          "email = #{email,jdbcType=VARCHAR},",
          "phone = #{phone,jdbcType=CHAR},",
          "salt = #{salt,jdbcType=VARCHAR},",
          "status = #{status,jdbcType=CHAR},",
          "gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},",
          "gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}",
        "where uid = #{uid,jdbcType=CHAR}"
    })
    int updateByPrimaryKey(User record);


    /**
     * 通过用户名获取用户信息
     *
     * @param username
     * @return
     */
    @Select("select * from " + USER_TABLE + " where username=#{username}")
    @Results({
            @Result(column = "uid", property = "uid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "real_name", property = "realName", jdbcType = JdbcType.VARCHAR),
            @Result(column = "gender", property = "gender", jdbcType = JdbcType.CHAR),
            @Result(column = "birthday", property = "birthday", jdbcType = JdbcType.DATE),
            @Result(column = "head_portrait_url", property = "headPortraitUrl", jdbcType = JdbcType.VARCHAR),
            @Result(column = "introduction", property = "introduction", jdbcType = JdbcType.VARCHAR),
            @Result(column = "join_time", property = "joinTime", jdbcType = JdbcType.DATE),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "phone", property = "phone", jdbcType = JdbcType.VARCHAR),
            @Result(column = "salt", property = "salt", jdbcType = JdbcType.VARCHAR),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "gmt_create", property = "gmtCreate", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP)
    })
    User getUser(String username);


    /**
     * 动态查询参数
     *
     * @param param String
     * @return
     */
    @SelectProvider(type = UserSqlProvider.class, method = "dynamicQuery")
    int dynamicQuery(String param, String value);

    /**
     * 邮件查询用户
     * @param email
     * @return
     */
    @Select("select * from " + USER_TABLE + " where email=#{email}")
    @Results({
            @Result(column = "uid", property = "uid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "real_name", property = "realName", jdbcType = JdbcType.VARCHAR),
            @Result(column = "gender", property = "gender", jdbcType = JdbcType.CHAR),
            @Result(column = "birthday", property = "birthday", jdbcType = JdbcType.DATE),
            @Result(column = "head_portrait_url", property = "headPortraitUrl", jdbcType = JdbcType.VARCHAR),
            @Result(column = "introduction", property = "introduction", jdbcType = JdbcType.VARCHAR),
            @Result(column = "join_time", property = "joinTime", jdbcType = JdbcType.DATE),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "phone", property = "phone", jdbcType = JdbcType.VARCHAR),
            @Result(column = "salt", property = "salt", jdbcType = JdbcType.VARCHAR),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "gmt_create", property = "gmtCreate", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP)
    })
    User getUserByEmail(String email);


    /**
     * 检测手机号
     * @param phone
     * @return
     */
    @Select("select count(phone) from " + USER_TABLE + " where phone=#{phone}")
    int countPhone(String phone);

    /**
     * 通过username查询用户所有信息
     *
     * @param username 用户名
     * @return User
     */
    @Select("select * from " + USER_TABLE + " where username = #{username}")
    @Results({
            @Result(column = "uid", property = "uid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "real_name", property = "realName", jdbcType = JdbcType.VARCHAR),
            @Result(column = "gender", property = "gender", jdbcType = JdbcType.CHAR),
            @Result(column = "birthday", property = "birthday", jdbcType = JdbcType.DATE),
            @Result(column = "head_portrait_url", property = "headPortraitUrl", jdbcType = JdbcType.VARCHAR),
            @Result(column = "introduction", property = "introduction", jdbcType = JdbcType.VARCHAR),
            @Result(column = "join_time", property = "joinTime", jdbcType = JdbcType.DATE),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "phone", property = "phone", jdbcType = JdbcType.VARCHAR),
            @Result(column = "salt", property = "salt", jdbcType = JdbcType.VARCHAR),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "gmt_create", property = "gmtCreate", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP)
    })
    User queryUserByUsername(String username);
}