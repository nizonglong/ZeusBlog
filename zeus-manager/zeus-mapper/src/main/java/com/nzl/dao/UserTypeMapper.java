package com.nzl.dao;

import com.nzl.common.constant.TableConstant;
import com.nzl.dao.provider.UserTypeSqlProvider;
import com.nzl.pojo.UserType;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface UserTypeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_type
     *
     * @mbg.generated
     */
    @Delete({
        "delete from user_type",
        "where user_type_id = #{userTypeId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer userTypeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_type
     *
     * @mbg.generated
     */
    @Insert({
        "insert into user_type (user_type_id, uid, ",
        "name, gmt_create, ",
        "gmt_modified)",
        "values (#{userTypeId,jdbcType=INTEGER}, #{uid,jdbcType=VARCHAR}, ",
        "#{name,jdbcType=CHAR}, #{gmtCreate,jdbcType=TIMESTAMP}, ",
        "#{gmtModified,jdbcType=TIMESTAMP})"
    })
    int insert(UserType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_type
     *
     * @mbg.generated
     */
    @InsertProvider(type= UserTypeSqlProvider.class, method="insertSelective")
    int insertSelective(UserType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_type
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "user_type_id, uid, name, gmt_create, gmt_modified",
        "from user_type",
        "where user_type_id = #{userTypeId,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="user_type_id", property="userTypeId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="uid", property="uid", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.CHAR),
        @Result(column="gmt_create", property="gmtCreate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gmt_modified", property="gmtModified", jdbcType=JdbcType.TIMESTAMP)
    })
    UserType selectByPrimaryKey(Integer userTypeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_type
     *
     * @mbg.generated
     */
    @UpdateProvider(type=UserTypeSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(UserType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_type
     *
     * @mbg.generated
     */
    @Update({
        "update user_type",
        "set uid = #{uid,jdbcType=VARCHAR},",
          "name = #{name,jdbcType=CHAR},",
          "gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},",
          "gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}",
        "where user_type_id = #{userTypeId,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(UserType record);


    /**
     * 获取用户所有自定义标签
     * @param uid
     * @return
     */
    @Select("select * from " + TableConstant.USER_TABLE + " where uid=#{uid}")
    @Results({
            @Result(column="user_type_id", property="userTypeId", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="uid", property="uid", jdbcType=JdbcType.VARCHAR),
            @Result(column="name", property="name", jdbcType=JdbcType.CHAR),
            @Result(column="gmt_create", property="gmtCreate", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="gmt_modified", property="gmtModified", jdbcType=JdbcType.TIMESTAMP)
    })
    List<UserType> getAllUserType(String uid);
}